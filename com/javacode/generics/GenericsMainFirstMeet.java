package com.javacode.generics;

public class GenericsMainFirstMeet {
    public static void main(String[] args) {
        // Что такое дженерики? Для начала немного теории.
        // в Java все типы данных неявно наследуются от класса Object
        // мы создали отдельный класс Container который содержит одно поле
        // типа Object
        // как мы видим при создании экземпляра данного класса мы указали
        // Integer как поле этого класса, все ок
        ContainerForFirstMeet box = new ContainerForFirstMeet(1);
        // теперь мы можем сделать вывод этого поля и например умножить его на 2
        // так? это же число. не совсем, мы то записали число, но оно у нас
        // типа Object, а значит прежде чем работать с ним надо сделать приведение
        // типа, и такая конструкция у нас отработает

        // однако если мы хотим присвоить новое значение этой переменной?
        // представим что мы забылись и записали туда String
        // Компилятор нам не скажет абсолютно ничего, так как класс String
        // точно так же наследуется от класса Object, однако в таком виде наш код уже
        // не отработает, мы не можем привести строку к Integer значению
//        box = new Container("1");
        System.out.println((Integer) box.getObject()*2);
        // конечно мы можем создать новый класс и в полях прописать нужный нам тип
        // данных, но таким образом мы нарушаем одно из главных правил
        // do-not-repeat-yourself, для этого и создали дженерики

        // Generic - это параметризация класса, метода, структуры данных
        // определенным типом который записывается в угловых скобках
        // благодаря такому подходу мы можем работать с разными типами данных
        // используя один и тот же код, при этом баги работы будут пойманы
        // компилятором

        // вот это правильное использование нашего контейнера
        // чтобы иметь возможность сделать такую запись мы должны параметризировать
        // наш класс при его создании дженерик типом <T>, выглядит так
        // public class Container<T>{}, так же все типы полей и возврат методов
        // тоже будут типа <T>. теперь мы можем при обьявлении экземпляра
        // этого класса параметризировать его тем типом который нам нужен
        ContainerForFirstMeet<Integer> box2 = new ContainerForFirstMeet<>(1);
        ContainerForFirstMeet<String> box3 = new ContainerForFirstMeet<>("1");
    }
}
