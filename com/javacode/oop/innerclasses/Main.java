package com.javacode.oop.innerclasses;

// классы могут быть вложенными, то есть быть инициализированы
// внутри другого класса, они могут быть статическими первый пример в классе
// Display

public class Main {
    public static void main(String[] args) {
        // как использовать наш класс Pixel
        // сначала инициализируем обьект класса CellPhone
        CellPhone phone = new CellPhone("Motorola", "Razor");
        // после этого нам необходимо инициализировать
        // экземпляр класса Display, помним что в классе CellPhone
        // у нас для этого есть отдельный метод, он сделан для того
        // чтобы нечаянно не инициализировать дисплей раньше телефона
        // так как дисплей(в теории, тут не реализовано) зависит
        // от модели телефона
        phone.turnOn();
        // теперь у нас есть экземпляр класса Display
        // инициализированный в классе CellPhone, получим его
        // и присвоим переменной типа Display
        // ключевым словом new мы при этом не можем воспользоваться
        // так как вне класса CellPhone класс Display не существует
        // для получения обьекта Display мы воспользуемся
        // геттером
//        Display display = phone.getDisplay();
        // и вот уже теперь мы можем инициализировать экземпляр
        // класс Pixel
        // сначала создаем переменную типа Display.Pixel, в данном
        // случае он записывается через точку
        // после этого идет необычный синтаксис:
//        Display.Pixel pixel = display.new Pixel(10,100,
//                Display.Color.BLACK);
        // почему таким же образом нельзя было инициализировать
        // обьект Display выше, а пользоваться дополнительным методом?
        // дело в том что внутри класса CellPhone нет реализации класса
        // Display и соответственно нет и конструктора к которому мы
        // могли бы обратиться с помощью new, есть только поле
        // типа Display которому мы должны сначала присвоить экземпляр
        // класса Display, а сделать внутри класса мы можем это методом
        // initDisplay() к которому уже обращается метод turnOn()
        // А вот уже внутри класса Display есть реализация класса
        // Pixel с конструктором и поэтому мы пишем display.new Pixel()
//        Display.Pixel pixel = phone.getDisplay().new Pixel(
//                123,123, Display.Pixel.Color.GREEN);
        phone.call("1234567890");




    }

}
